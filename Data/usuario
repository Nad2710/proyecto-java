import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import.java.util.ArrayList;
import.java.List;

//**Representa un usuario de la biblioteca
*
*
*
*/
public class Usuario{
       private String id;
       private String nombre;
       private String carrera;
       private List<Prestamo> prestamos;
       private LocalDate fechaFinPenalizacion;
       private String motivoPenalizacion;
       private List<String> historialPenalizaciones; //Historial de Penalizaciones

       /**
       Crea un nuevo usuario con identificador, nombre y carrera
       *
       * @param id Identificador unico del usuario.
       * @param nombre Nombre completo del usuario.
       * @param carrera Carrera del usuario.
       /*
       public Usuario(String id, String nombre, String carrera){
              this.id = id;
              this.nombre = nombre;
              this.carrera = carrera;
              this.prestamos = new ArrayList<>();
              this.historialPenalizaciones = new ArrayList<>();
       }

       /** @return ID del usuario
       */
       public String getId() {
              return id;
       }
       /** @return nombre del usuario
       */
       public String getNombre() {
              return nombre;
       }
       /** 
       * @return Carrera del usuario
       */
       public String getCarrera() {
              return carrera;
       }

       //Metodos de prestamo
       /*
        * Agrega un nuevo prestamo al usuario si no esta penalizado
        * @param prestamos Objeto de tipo Prestamo
        */
       public void agregarPrestamo (Prestamo prestamo) {
              if (!puedePrestar()) {
              System.out.println("Usuario penalizado. No puede realizar prestamos hasta: " + fechaFinPenalizacion + ". Motivo: " + motivoPenalizacion);
              return;
       }
       prestamos.add(prestamo);
      }
      /**
        * @return Lista de todos los prestamos activos del usuario
        */
      public List<Prestamos> obtenerPrestamos() {
           return new ArrayList<>(prestamos);
      }
       /**
       * Muestra en consola todos los prestamos activos del usuario
       */
      public void mostrarPrestamos() {
           System.out.println("Prestamos del usuario" + nombre +":");
           for (Prestamo p : prestamos) {
               System.out.println("-" + p.getLibro().getTitulo() + " (Fecha de devolucion: " + p.getFechaDevolucion() + ")";
           }
      }

           /**
            * Busca si el usuario tiene un prestamo de un libro con un ISBN dado
            * @param isbn ISBN del libro a buscar
            * @return true si ese prestamo existe 
            */
           public boolean tienePrestamo (String isbn) {
                for (Prestamo p : prestamos) {
                     if (p.getLibro().getIsbn().equals(isbn)) {
                         return true;
                     }
                }
                return false;
           }

           // Metodos de penalizacion
           /**
            * Verifica si el usuario tiene una penalizacion activa
            * @return true si el prestamo existe
            */
           public boolean tienePenalizacion() {
                if (fechaFinPenalizacion == null) {
                    return false;
                }
                return LocalDate.now().isBefore(fechaFinPenalizacion);
           }

           /**
            * Agrega una penalizacion al usuario
            * @param dias Numero de dias de penalizacion
            * @param motivo Razon de la penalizacion 
            */
           public void agregarPenalizacion(int dias, String motivo) {
                this.fechaFinPenalizacion = LocalDate.now().plusDays(dias);
                this.motivoPenalizacion = motivo;
                this.historialPenalizaciones.add("Penalizado el " + LocalDate.now() + "por" + dias + "dias.Motivo: " + motivo);
           }
           /**
            * Elimina la penalizacion del usuario
            */
           public void quitarPenalizacion() {
                this.fechaFinPenalizacion = null;
                this.motivoPenalizacion = null;
           }

           /** 
           * @return Dias restantes de penalizacion 
           */
           public long diasPenalizacionRestantes() {
                if(!tienepenalizacion()) {
                   return 0;
                }
                return.ChronoUnit.DAYS.between(LocalDate.now(), fechaFinPenalizacion);
            }

            /**
             * @return Verifica si el usuario puede realizar prestamos
             * @return true si puede hacer prestamos 
             */
            public boolean puedePrestar() {
                return !tienePenalizacion();
            }

            /**
            * @return Historial completo de penalizaciones
            */
            public List<String> getHistorialPenalizaciones() {
                  return new ArrayList<>(historialPenalizaciones);
            }

            /**
            * @return Informacion detallada del usuario incluyendo estado de penalizacion
            */
            @Override
            public String toString() {
                  String estado = puedePrestar() ? "Habilitado para prestamos": "Penalizado hasta" + fechaFinPenalizacion

